{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nPart 3 (experiment #2):\\nI ran LDA topic modelling on around 10k of the reviews, but this time\\nwith the first 20 2- or 1-starred reviews for each of the 500 novels.\\n\\nMotivation: to compare the topics found in more negative reviews\\nwith those found in the general sample done in part 1.\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ------------------------ pre-explanation ------------------------ #\n",
    "\n",
    "'''\n",
    "Part 1 (the main part of the pset):\n",
    "I ran LDA topic modelling on around 10k reviews (the first 20 reviews\n",
    "appearing in each of the 500 novels' csv files).\n",
    "\n",
    "Note: instead of saving the topic frequencies for each individual review,\n",
    "I take the average of the reviews for each novel and save these mean\n",
    "values in a dataframe in which each row represents a novel.\n",
    "'''\n",
    "\n",
    "'''\n",
    "Part 2 (experiment #1):\n",
    "I plot the topic frequencies found in part 1, based on each novel's\n",
    "average rating. \n",
    "\n",
    "Motivation: to see whether there were any topics that tended to\n",
    "appear more in reviews for generally higher or lower-rated novels.\n",
    "'''\n",
    "\n",
    "'''\n",
    "Part 3 (experiment #2):\n",
    "I ran LDA topic modelling on around 10k of the reviews, but this time\n",
    "with the first 20 2- or 1-starred reviews for each of the 500 novels.\n",
    "\n",
    "Motivation: to compare the topics found in more negative reviews\n",
    "with those found in the general sample done in part 1.\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "##### PROBLEM 1 part 1\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "'''\n",
    "making the initial dataframe representing all 500 novels\n",
    "'''\n",
    "\n",
    "path = \"/Users/faithrta/engl_490_python/GR_BLM/\"\n",
    "\n",
    "# reading in the given csv file\n",
    "meta_overview = pd.read_csv(path + \"GR_BLM_TITLES_META_500_FINAL copy.csv\", encoding='latin1')\n",
    "\n",
    "# a copy of the above dataframe but with only the most important, identifying columns\n",
    "meta_overview_cut = meta_overview[['FILE_ID', 'AUTHOR', 'TITLE']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROBLEM 1 part 1\n",
    "\n",
    "import os\n",
    "\n",
    "'''\n",
    "saving the contents of ~10k reviews to a list and creating a dataframe with said reviews\n",
    "\n",
    "note: if redoing this, try pruning the data beforehand for names, spanish, stopwords, etc.\n",
    "'''\n",
    "\n",
    "path_csvs = path + 'BLM copy/'\n",
    "\n",
    "# a list of all the individual csv filenames (each representing one books' reviews)\n",
    "csv_files = meta_overview['FILE_ID'].tolist()\n",
    "\n",
    "# a list for the contents of ~10k reviews\n",
    "texts_10k = []\n",
    "\n",
    "# a new dataframe to store information about ~10k reviews\n",
    "df_10k_reviews = pd.DataFrame(columns = ['review_date', 'review_sentiments', 'review_rating', 'review_content', 'file_id'])\n",
    "\n",
    "# ------------------------- populating the list and dataframe ------------------------ #\n",
    "\n",
    "# iterating through each novel\n",
    "for csv in csv_files:\n",
    "    \n",
    "    # the path to the novel's csv file of reviews\n",
    "    csv_filepath = path_csvs + csv + '.csv'\n",
    "    \n",
    "    # reading the current novel's csv file of reviews and saving only certain columns\n",
    "    cur_csv = pd.read_csv(csv_filepath, encoding = 'latin1')\n",
    "    cur_csv = cur_csv[['review_date', 'review_sentiments', 'review_rating', 'review_content']]\n",
    "    \n",
    "    # adding a new column with the current csv file's name\n",
    "    cur_csv['file_id'] = csv\n",
    "    \n",
    "    # making a copy of the current csv, but with only the first 20 reviews\n",
    "    cur_csv = cur_csv[:20]\n",
    "    \n",
    "    # concatenating the current novel's reviews to the larger dataframes (each review = 1 row)\n",
    "    df_10k_reviews = pd.concat([df_10k_reviews, cur_csv])\n",
    "    \n",
    "    # adding the contents of this novel's first 20 reviews to texts_10k, for topic modeling later on\n",
    "    texts_10k.extend(cur_csv['review_content'].tolist())\n",
    "    \n",
    "# resetting the indices of the larger dataframes\n",
    "df_10k_reviews = df_10k_reviews.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_date</th>\n",
       "      <th>review_sentiments</th>\n",
       "      <th>review_rating</th>\n",
       "      <th>review_content</th>\n",
       "      <th>file_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aug 18, 2021</td>\n",
       "      <td>it was amazing</td>\n",
       "      <td>5.0</td>\n",
       "      <td>To kill a make cking bird by Herper Lee, is aa...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Nov 07, 2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>In the novel To Kill a Mockingbird, by Harper ...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jun 24, 2014</td>\n",
       "      <td>it was amazing</td>\n",
       "      <td>5.0</td>\n",
       "      <td>I am a 27 year old man, and I read books. Soun...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>May 12, 2012</td>\n",
       "      <td>it was amazing</td>\n",
       "      <td>5.0</td>\n",
       "      <td>in every single sense ...it is amazin...one ac...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jun 25, 2014</td>\n",
       "      <td>it was amazing</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Those novels entitled with `best-selling` stam...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9967</th>\n",
       "      <td>Apr 06, 2021</td>\n",
       "      <td>really liked it</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5 stars - An intimate and compassionate look...</td>\n",
       "      <td>BLM_499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9968</th>\n",
       "      <td>May 11, 2021</td>\n",
       "      <td>really liked it</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Glaude warns at the start that this isn't a bo...</td>\n",
       "      <td>BLM_499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9969</th>\n",
       "      <td>May 09, 2021</td>\n",
       "      <td>really liked it</td>\n",
       "      <td>4.0</td>\n",
       "      <td>This book is almost entirely a sympathetic, in...</td>\n",
       "      <td>BLM_499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9970</th>\n",
       "      <td>Sep 23, 2020</td>\n",
       "      <td>really liked it</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Democracy In Black, GlaudeÃ¢ÂÂs previous boo...</td>\n",
       "      <td>BLM_499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9971</th>\n",
       "      <td>May 30, 2021</td>\n",
       "      <td>really liked it</td>\n",
       "      <td>4.0</td>\n",
       "      <td>I wanted to love this, but I didn't. It is ver...</td>\n",
       "      <td>BLM_499</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9972 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       review_date review_sentiments  review_rating  \\\n",
       "0     Aug 18, 2021    it was amazing            5.0   \n",
       "1     Nov 07, 2017               NaN            NaN   \n",
       "2     Jun 24, 2014    it was amazing            5.0   \n",
       "3     May 12, 2012    it was amazing            5.0   \n",
       "4     Jun 25, 2014    it was amazing            5.0   \n",
       "...            ...               ...            ...   \n",
       "9967  Apr 06, 2021   really liked it            4.0   \n",
       "9968  May 11, 2021   really liked it            4.0   \n",
       "9969  May 09, 2021   really liked it            4.0   \n",
       "9970  Sep 23, 2020   really liked it            4.0   \n",
       "9971  May 30, 2021   really liked it            4.0   \n",
       "\n",
       "                                         review_content  file_id  \n",
       "0     To kill a make cking bird by Herper Lee, is aa...  BLM_001  \n",
       "1     In the novel To Kill a Mockingbird, by Harper ...  BLM_001  \n",
       "2     I am a 27 year old man, and I read books. Soun...  BLM_001  \n",
       "3     in every single sense ...it is amazin...one ac...  BLM_001  \n",
       "4     Those novels entitled with `best-selling` stam...  BLM_001  \n",
       "...                                                 ...      ...  \n",
       "9967  4.5 stars - An intimate and compassionate look...  BLM_499  \n",
       "9968  Glaude warns at the start that this isn't a bo...  BLM_499  \n",
       "9969  This book is almost entirely a sympathetic, in...  BLM_499  \n",
       "9970  Democracy In Black, GlaudeÃ¢ÂÂs previous boo...  BLM_499  \n",
       "9971  I wanted to love this, but I didn't. It is ver...  BLM_499  \n",
       "\n",
       "[9972 rows x 5 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_10k_reviews.head(-20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROBLEM 1 part 1\n",
    "\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
    "\n",
    "'''\n",
    "defining a helper function that uses CountVectorizer to vectorize a list of text\n",
    "'''\n",
    "\n",
    "def vectorize(list_of_texts):\n",
    "    \n",
    "    # creating a new CountVectorizer\n",
    "    tf_vectorizer = CountVectorizer()\n",
    "    tf = tf_vectorizer.fit_transform(list_of_texts)\n",
    "    \n",
    "    # retrieving the feature names\n",
    "    tf_feature_names = tf_vectorizer.get_feature_names()\n",
    "    \n",
    "    return tf, tf_feature_names\n",
    "\n",
    "# calling the vectorize function on the list of ~10k review contents\n",
    "tf, tf_feature_names = vectorize(texts_10k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROBLEM 1 part 1\n",
    "\n",
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "\n",
    "'''\n",
    "defining a helper function that uses uses LDA to run topic modeling\n",
    "'''\n",
    "\n",
    "def run_lda(tf):\n",
    "    \n",
    "    # running lda to yield 15 distinct topics\n",
    "    lda = LatentDirichletAllocation(15, max_iter = 50, learning_method = 'online', learning_offset = 50, random_state = 0).fit(tf)\n",
    "\n",
    "    return lda.transform(tf), lda.components_\n",
    "\n",
    "# calling the run_lda function on the vectorized text\n",
    "lda_W, lda_H = run_lda(tf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Topic 0:',\n",
       "  'de que la en el no un me es una se â³n los con por lo su libro mã para'),\n",
       " ('Topic 1:',\n",
       "  'azere council onion rafael tarisai raybearer boady dayo eskens jadine songland olugbade jessup sanjeet valerian abiku enoba anc minnesota redemptors'),\n",
       " ('Topic 2:',\n",
       "  'katrina housing binti city hurricane queenie home government poverty ward poor segregation brooklyn patsy neighborhoods street fabiola zeitoun gentrification rob'),\n",
       " ('Topic 3:',\n",
       "  'nic justyce buck bree tristan quan carl donte fencing jake nev grisham ford duo sel tasha thurston manny spider sj'),\n",
       " ('Topic 4:',\n",
       "  'his he civil war https american the rights by washington of obama org grant states president john wikipedia political wiki'),\n",
       " ('Topic 5:',\n",
       "  'antigua kincaid lolly nyasha tambu lonnie oblomov portia manyara zimbabwe locomotion dangarembga lollyã mufaro tavish cline ransome langstonã antiguans willow'),\n",
       " ('Topic 6:',\n",
       "  'ashley twitty thandi karamo leovy clemmons culinary tourism ashleyã lutie azumah jillian philippe yvette skaggs rozelle tangy lashawn ghettoside dina'),\n",
       " ('Topic 7:',\n",
       "  'nishat derek troy tar ellie aster felix fascism wes witch arrah leopard margot henna akata roger jende portland neni albright'),\n",
       " ('Topic 8:',\n",
       "  'maya angelou elijah duke deza islam ali winter marva muslims marable vivian muhammad ryann oree kiese ledi pheby yeine patina'),\n",
       " ('Topic 9:',\n",
       "  'haiti alaine birdie locke danticat bluebird marvin khan ranger basquiat irene cullors tembi tavia sirens kendiã warsan fonny packer attica'),\n",
       " ('Topic 10:',\n",
       "  'alice celie cole yummy shug alyssa broom nettie xiala sofia serapio celebrates cha albert takumi 164 teek â¾ã lavander peeler'),\n",
       " ('Topic 11:',\n",
       "  'ona die â¼ã rae starr angie man fanon und hurston thomas kev dey zoe cudjo scoob bri abrams kezi ch'),\n",
       " ('Topic 12:',\n",
       "  'frannie ãªâ libertie claudette tyson tru cicely colvin tatum langton kunte kinte âªãªâ terry libertieã kunta greenidge zimmer isa patsyã'),\n",
       " ('Topic 13:',\n",
       "  'the and to of in is it that this was book for as with her but not on she you'),\n",
       " ('Topic 14:',\n",
       "  'juliet rue lina gabby lu doro sephy belles harlowe henri josephine callum younge anyanwu danez deka issa allen ghizon noughts')]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# PROBLEM 1 part 1\n",
    "\n",
    "'''\n",
    "defining a helper function to display the topics found\n",
    "'''\n",
    "\n",
    "def display_topics(H, W, feature_names, documents, no_top_words):\n",
    "    \n",
    "    # a list to hold the topics\n",
    "    topics = []\n",
    "    \n",
    "    # iterating through the topic ids and topics\n",
    "    for topic_idx, topic in enumerate(H):\n",
    "        (\"Topic %d:\" % (topic_idx))\n",
    "        topics.append(((\"Topic %d:\" % (topic_idx)), \" \".join([feature_names[i]\n",
    "                        for i in topic.argsort()[:-no_top_words - 1:-1]])))\n",
    "        \n",
    "    return topics\n",
    "            \n",
    "no_top_words = 20\n",
    "\n",
    "# calling the display_topics on the data from the ~10k vectorized reviews\n",
    "topics = display_topics(lda_H, lda_W, tf_feature_names, texts_10k, no_top_words)\n",
    "\n",
    "# outputting the topics\n",
    "topics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROBLEM 1 part 1\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "'''\n",
    "defining a helper function to normalize the topic distribution and save it as a dataframe\n",
    "'''\n",
    "\n",
    "def clean_topic_dst(lda_W):\n",
    "\n",
    "    doc_topic_dist = lda_W\n",
    "    doc_topic_dist_unnormalized = np.matrix(doc_topic_dist)\n",
    "    doc_topic_dist = doc_topic_dist_unnormalized/doc_topic_dist_unnormalized.sum(axis=1)\n",
    "\n",
    "    df = pd.DataFrame(doc_topic_dist)\n",
    "    cols = df.columns.tolist()\n",
    "    cols = cols[-1:] + cols[:-1]\n",
    "    df = df[cols]\n",
    "\n",
    "    return df\n",
    "\n",
    "# calling the helper function on the data from the ~10k reviews then concatenating the\n",
    "# resulting dataframe with that representing the ~10k reviews\n",
    "df_topics = pd.concat([df_10k_reviews, clean_topic_dst(lda_W)], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROBLEM 1 part 1\n",
    "\n",
    "'''\n",
    "defining a helper function to make a dataframe displaying the average topic value per novel\n",
    "'''\n",
    "\n",
    "def make_means_df(df_topics):\n",
    "\n",
    "    # making a copy of the og dataframe, but with only the 'FILE_ID', 'AUTHOR','TITLE' columns\n",
    "    df_means = meta_overview_cut\n",
    "\n",
    "    # iterating through each topic found by LDA topic modelling to find the average values\n",
    "    # of each topic per novel (hence groupby('file_id'))\n",
    "    for i in range(15):\n",
    "        temp_df = df_topics.groupby('file_id', as_index=False)[i].mean()\n",
    "        temp_df = temp_df[i]\n",
    "        df_means = pd.concat([df_means, temp_df], axis=1)\n",
    "        \n",
    "    return df_means\n",
    "\n",
    "# calling the helper function on the dataframe of topics\n",
    "df_means = make_means_df(df_topics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FILE_ID</th>\n",
       "      <th>AUTHOR</th>\n",
       "      <th>TITLE</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLM_001</td>\n",
       "      <td>Harper Lee</td>\n",
       "      <td>To Kill a Mockingbird</td>\n",
       "      <td>0.003960</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.006515</td>\n",
       "      <td>0.001885</td>\n",
       "      <td>0.085995</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.005750</td>\n",
       "      <td>0.001959</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.879837</td>\n",
       "      <td>0.001763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BLM_002</td>\n",
       "      <td>Kathryn Stockett</td>\n",
       "      <td>The Help</td>\n",
       "      <td>0.006840</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.006005</td>\n",
       "      <td>0.013765</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.004971</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.006295</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.937251</td>\n",
       "      <td>0.002763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BLM_003</td>\n",
       "      <td>Angie Thomas</td>\n",
       "      <td>The Hate U Give</td>\n",
       "      <td>0.004346</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.002399</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.001678</td>\n",
       "      <td>0.004592</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.060895</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.921215</td>\n",
       "      <td>0.000542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BLM_004</td>\n",
       "      <td>Celeste Ng</td>\n",
       "      <td>Little Fires Everywhere</td>\n",
       "      <td>0.028313</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.001755</td>\n",
       "      <td>0.005015</td>\n",
       "      <td>0.003013</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.002170</td>\n",
       "      <td>0.001741</td>\n",
       "      <td>0.003636</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.944423</td>\n",
       "      <td>0.001364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLM_005</td>\n",
       "      <td>Michelle Obama</td>\n",
       "      <td>Becoming</td>\n",
       "      <td>0.006666</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.001867</td>\n",
       "      <td>0.000986</td>\n",
       "      <td>0.037658</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.001275</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.000796</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.946310</td>\n",
       "      <td>0.000555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>475</th>\n",
       "      <td>BLM_476</td>\n",
       "      <td>Nikki Giovanni</td>\n",
       "      <td>Rosa</td>\n",
       "      <td>0.004729</td>\n",
       "      <td>0.001736</td>\n",
       "      <td>0.006162</td>\n",
       "      <td>0.000693</td>\n",
       "      <td>0.016845</td>\n",
       "      <td>0.000693</td>\n",
       "      <td>0.000693</td>\n",
       "      <td>0.002134</td>\n",
       "      <td>0.000766</td>\n",
       "      <td>0.000693</td>\n",
       "      <td>0.001645</td>\n",
       "      <td>0.005498</td>\n",
       "      <td>0.002201</td>\n",
       "      <td>0.954483</td>\n",
       "      <td>0.001032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>476</th>\n",
       "      <td>BLM_477</td>\n",
       "      <td>Z.Z. Packer</td>\n",
       "      <td>Drinking Coffee Elsewhere</td>\n",
       "      <td>0.000744</td>\n",
       "      <td>0.000744</td>\n",
       "      <td>0.010507</td>\n",
       "      <td>0.000744</td>\n",
       "      <td>0.004195</td>\n",
       "      <td>0.000744</td>\n",
       "      <td>0.005384</td>\n",
       "      <td>0.001462</td>\n",
       "      <td>0.001298</td>\n",
       "      <td>0.013029</td>\n",
       "      <td>0.009955</td>\n",
       "      <td>0.001696</td>\n",
       "      <td>0.000923</td>\n",
       "      <td>0.947831</td>\n",
       "      <td>0.000744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477</th>\n",
       "      <td>BLM_478</td>\n",
       "      <td>Michael W. Twitty</td>\n",
       "      <td>The Cooking Gene: A Journey Through African Am...</td>\n",
       "      <td>0.000701</td>\n",
       "      <td>0.000701</td>\n",
       "      <td>0.002231</td>\n",
       "      <td>0.000774</td>\n",
       "      <td>0.004851</td>\n",
       "      <td>0.000978</td>\n",
       "      <td>0.016704</td>\n",
       "      <td>0.000873</td>\n",
       "      <td>0.002178</td>\n",
       "      <td>0.002153</td>\n",
       "      <td>0.001599</td>\n",
       "      <td>0.003024</td>\n",
       "      <td>0.001165</td>\n",
       "      <td>0.960999</td>\n",
       "      <td>0.001069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478</th>\n",
       "      <td>BLM_479</td>\n",
       "      <td>Amanda  Joy</td>\n",
       "      <td>A River of Royal Blood</td>\n",
       "      <td>0.030185</td>\n",
       "      <td>0.000745</td>\n",
       "      <td>0.000966</td>\n",
       "      <td>0.001382</td>\n",
       "      <td>0.002037</td>\n",
       "      <td>0.000786</td>\n",
       "      <td>0.000745</td>\n",
       "      <td>0.005141</td>\n",
       "      <td>0.002841</td>\n",
       "      <td>0.000745</td>\n",
       "      <td>0.001949</td>\n",
       "      <td>0.007785</td>\n",
       "      <td>0.003355</td>\n",
       "      <td>0.939270</td>\n",
       "      <td>0.002067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>479</th>\n",
       "      <td>BLM_480</td>\n",
       "      <td>Deirdre Mask</td>\n",
       "      <td>The Address Book: What Street Addresses Reveal...</td>\n",
       "      <td>0.005863</td>\n",
       "      <td>0.001199</td>\n",
       "      <td>0.011584</td>\n",
       "      <td>0.001450</td>\n",
       "      <td>0.014015</td>\n",
       "      <td>0.001199</td>\n",
       "      <td>0.001240</td>\n",
       "      <td>0.004535</td>\n",
       "      <td>0.001378</td>\n",
       "      <td>0.002802</td>\n",
       "      <td>0.001281</td>\n",
       "      <td>0.008891</td>\n",
       "      <td>0.001199</td>\n",
       "      <td>0.942120</td>\n",
       "      <td>0.001244</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>480 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     FILE_ID             AUTHOR  \\\n",
       "0    BLM_001         Harper Lee   \n",
       "1    BLM_002   Kathryn Stockett   \n",
       "2    BLM_003       Angie Thomas   \n",
       "3    BLM_004         Celeste Ng   \n",
       "4    BLM_005     Michelle Obama   \n",
       "..       ...                ...   \n",
       "475  BLM_476     Nikki Giovanni   \n",
       "476  BLM_477        Z.Z. Packer   \n",
       "477  BLM_478  Michael W. Twitty   \n",
       "478  BLM_479        Amanda  Joy   \n",
       "479  BLM_480       Deirdre Mask   \n",
       "\n",
       "                                                 TITLE         0         1  \\\n",
       "0                                To Kill a Mockingbird  0.003960  0.001763   \n",
       "1                                             The Help  0.006840  0.002763   \n",
       "2                                      The Hate U Give  0.004346  0.000542   \n",
       "3                              Little Fires Everywhere  0.028313  0.001364   \n",
       "4                                             Becoming  0.006666  0.000555   \n",
       "..                                                 ...       ...       ...   \n",
       "475                                               Rosa  0.004729  0.001736   \n",
       "476                          Drinking Coffee Elsewhere  0.000744  0.000744   \n",
       "477  The Cooking Gene: A Journey Through African Am...  0.000701  0.000701   \n",
       "478                             A River of Royal Blood  0.030185  0.000745   \n",
       "479  The Address Book: What Street Addresses Reveal...  0.005863  0.001199   \n",
       "\n",
       "            2         3         4         5         6         7         8  \\\n",
       "0    0.006515  0.001885  0.085995  0.001763  0.001763  0.005750  0.001959   \n",
       "1    0.002763  0.006005  0.013765  0.002763  0.002763  0.004971  0.002763   \n",
       "2    0.000542  0.000542  0.002399  0.000542  0.000542  0.000542  0.001678   \n",
       "3    0.001755  0.005015  0.003013  0.001364  0.001364  0.002170  0.001741   \n",
       "4    0.001867  0.000986  0.037658  0.000555  0.000555  0.000555  0.001275   \n",
       "..        ...       ...       ...       ...       ...       ...       ...   \n",
       "475  0.006162  0.000693  0.016845  0.000693  0.000693  0.002134  0.000766   \n",
       "476  0.010507  0.000744  0.004195  0.000744  0.005384  0.001462  0.001298   \n",
       "477  0.002231  0.000774  0.004851  0.000978  0.016704  0.000873  0.002178   \n",
       "478  0.000966  0.001382  0.002037  0.000786  0.000745  0.005141  0.002841   \n",
       "479  0.011584  0.001450  0.014015  0.001199  0.001240  0.004535  0.001378   \n",
       "\n",
       "            9        10        11        12        13        14  \n",
       "0    0.001763  0.001763  0.001763  0.001763  0.879837  0.001763  \n",
       "1    0.002763  0.002763  0.006295  0.002763  0.937251  0.002763  \n",
       "2    0.004592  0.000542  0.060895  0.000542  0.921215  0.000542  \n",
       "3    0.003636  0.001364  0.001752  0.001364  0.944423  0.001364  \n",
       "4    0.000555  0.000796  0.000555  0.000555  0.946310  0.000555  \n",
       "..        ...       ...       ...       ...       ...       ...  \n",
       "475  0.000693  0.001645  0.005498  0.002201  0.954483  0.001032  \n",
       "476  0.013029  0.009955  0.001696  0.000923  0.947831  0.000744  \n",
       "477  0.002153  0.001599  0.003024  0.001165  0.960999  0.001069  \n",
       "478  0.000745  0.001949  0.007785  0.003355  0.939270  0.002067  \n",
       "479  0.002802  0.001281  0.008891  0.001199  0.942120  0.001244  \n",
       "\n",
       "[480 rows x 18 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_means.head(-20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "##### PROBLEM 1 part 2 \n",
    "##### start of experiment #1: plotting the topic frequencies based on each novel's average rating\n",
    "\n",
    "'''\n",
    "setting up some analysis (or an attempt at it) based on each novel's average rating\n",
    "'''\n",
    "\n",
    "# adding the RATING column to the df_means dataframe\n",
    "df_means_ratings = pd.concat([df_means, meta_overview['RATING']], axis=1)\n",
    "\n",
    "# moving the RATING column in front of the columns with each topic's mean value\n",
    "ratings_column = df_means_ratings.pop('RATING')\n",
    "df_means_ratings.insert(3, 'RATING', ratings_column)\n",
    "\n",
    "# rounding each novel's average rating to the nearest tenth, to make it easier to plot\n",
    "df_means_ratings = df_means_ratings.round({'RATING': 1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FILE_ID</th>\n",
       "      <th>AUTHOR</th>\n",
       "      <th>TITLE</th>\n",
       "      <th>RATING</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLM_001</td>\n",
       "      <td>Harper Lee</td>\n",
       "      <td>To Kill a Mockingbird</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.003960</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.006515</td>\n",
       "      <td>0.001885</td>\n",
       "      <td>0.085995</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.005750</td>\n",
       "      <td>0.001959</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.879837</td>\n",
       "      <td>0.001763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BLM_002</td>\n",
       "      <td>Kathryn Stockett</td>\n",
       "      <td>The Help</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.006840</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.006005</td>\n",
       "      <td>0.013765</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.004971</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.006295</td>\n",
       "      <td>0.002763</td>\n",
       "      <td>0.937251</td>\n",
       "      <td>0.002763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BLM_003</td>\n",
       "      <td>Angie Thomas</td>\n",
       "      <td>The Hate U Give</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.004346</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.002399</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.001678</td>\n",
       "      <td>0.004592</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.060895</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>0.921215</td>\n",
       "      <td>0.000542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BLM_004</td>\n",
       "      <td>Celeste Ng</td>\n",
       "      <td>Little Fires Everywhere</td>\n",
       "      <td>4.1</td>\n",
       "      <td>0.028313</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.001755</td>\n",
       "      <td>0.005015</td>\n",
       "      <td>0.003013</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.002170</td>\n",
       "      <td>0.001741</td>\n",
       "      <td>0.003636</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.944423</td>\n",
       "      <td>0.001364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLM_005</td>\n",
       "      <td>Michelle Obama</td>\n",
       "      <td>Becoming</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.006666</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.001867</td>\n",
       "      <td>0.000986</td>\n",
       "      <td>0.037658</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.001275</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.000796</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.000555</td>\n",
       "      <td>0.946310</td>\n",
       "      <td>0.000555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>485</th>\n",
       "      <td>BLM_486</td>\n",
       "      <td>J.  Elle</td>\n",
       "      <td>Wings of Ebony (Wings of Ebony, #1)</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.000803</td>\n",
       "      <td>0.000680</td>\n",
       "      <td>0.003641</td>\n",
       "      <td>0.001629</td>\n",
       "      <td>0.001380</td>\n",
       "      <td>0.000680</td>\n",
       "      <td>0.000680</td>\n",
       "      <td>0.000847</td>\n",
       "      <td>0.000819</td>\n",
       "      <td>0.000680</td>\n",
       "      <td>0.000870</td>\n",
       "      <td>0.001715</td>\n",
       "      <td>0.000680</td>\n",
       "      <td>0.969656</td>\n",
       "      <td>0.015239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>486</th>\n",
       "      <td>BLM_487</td>\n",
       "      <td>Kacen Callender</td>\n",
       "      <td>Hurricane Child</td>\n",
       "      <td>3.8</td>\n",
       "      <td>0.000926</td>\n",
       "      <td>0.005055</td>\n",
       "      <td>0.006028</td>\n",
       "      <td>0.001926</td>\n",
       "      <td>0.000926</td>\n",
       "      <td>0.000926</td>\n",
       "      <td>0.001110</td>\n",
       "      <td>0.001081</td>\n",
       "      <td>0.000926</td>\n",
       "      <td>0.000926</td>\n",
       "      <td>0.002484</td>\n",
       "      <td>0.002329</td>\n",
       "      <td>0.000926</td>\n",
       "      <td>0.972581</td>\n",
       "      <td>0.001848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>487</th>\n",
       "      <td>BLM_488</td>\n",
       "      <td>Jon Meacham</td>\n",
       "      <td>His Truth Is Marching On: John Lewis and the P...</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.001053</td>\n",
       "      <td>0.000749</td>\n",
       "      <td>0.007779</td>\n",
       "      <td>0.000970</td>\n",
       "      <td>0.072173</td>\n",
       "      <td>0.000749</td>\n",
       "      <td>0.000749</td>\n",
       "      <td>0.001344</td>\n",
       "      <td>0.001997</td>\n",
       "      <td>0.000877</td>\n",
       "      <td>0.000749</td>\n",
       "      <td>0.003122</td>\n",
       "      <td>0.000749</td>\n",
       "      <td>0.906012</td>\n",
       "      <td>0.000928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>488</th>\n",
       "      <td>BLM_489</td>\n",
       "      <td>Maya Angelou</td>\n",
       "      <td>The Complete Collected Poems</td>\n",
       "      <td>4.4</td>\n",
       "      <td>0.001907</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.005405</td>\n",
       "      <td>0.002617</td>\n",
       "      <td>0.018678</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.001629</td>\n",
       "      <td>0.007857</td>\n",
       "      <td>0.027716</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.002667</td>\n",
       "      <td>0.001718</td>\n",
       "      <td>0.007100</td>\n",
       "      <td>0.916947</td>\n",
       "      <td>0.001440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>489</th>\n",
       "      <td>BLM_490</td>\n",
       "      <td>Jonathan M. Metzl</td>\n",
       "      <td>Dying of Whiteness: How the Politics of Racial...</td>\n",
       "      <td>4.1</td>\n",
       "      <td>0.001939</td>\n",
       "      <td>0.001814</td>\n",
       "      <td>0.004142</td>\n",
       "      <td>0.002815</td>\n",
       "      <td>0.025329</td>\n",
       "      <td>0.001814</td>\n",
       "      <td>0.001814</td>\n",
       "      <td>0.003113</td>\n",
       "      <td>0.011405</td>\n",
       "      <td>0.001923</td>\n",
       "      <td>0.002473</td>\n",
       "      <td>0.001814</td>\n",
       "      <td>0.001814</td>\n",
       "      <td>0.933976</td>\n",
       "      <td>0.003816</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>490 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     FILE_ID             AUTHOR  \\\n",
       "0    BLM_001         Harper Lee   \n",
       "1    BLM_002   Kathryn Stockett   \n",
       "2    BLM_003       Angie Thomas   \n",
       "3    BLM_004         Celeste Ng   \n",
       "4    BLM_005     Michelle Obama   \n",
       "..       ...                ...   \n",
       "485  BLM_486           J.  Elle   \n",
       "486  BLM_487    Kacen Callender   \n",
       "487  BLM_488        Jon Meacham   \n",
       "488  BLM_489       Maya Angelou   \n",
       "489  BLM_490  Jonathan M. Metzl   \n",
       "\n",
       "                                                 TITLE  RATING         0  \\\n",
       "0                                To Kill a Mockingbird     4.3  0.003960   \n",
       "1                                             The Help     4.5  0.006840   \n",
       "2                                      The Hate U Give     4.5  0.004346   \n",
       "3                              Little Fires Everywhere     4.1  0.028313   \n",
       "4                                             Becoming     4.5  0.006666   \n",
       "..                                                 ...     ...       ...   \n",
       "485                Wings of Ebony (Wings of Ebony, #1)     4.0  0.000803   \n",
       "486                                    Hurricane Child     3.8  0.000926   \n",
       "487  His Truth Is Marching On: John Lewis and the P...     4.5  0.001053   \n",
       "488                       The Complete Collected Poems     4.4  0.001907   \n",
       "489  Dying of Whiteness: How the Politics of Racial...     4.1  0.001939   \n",
       "\n",
       "            1         2         3         4         5         6         7  \\\n",
       "0    0.001763  0.006515  0.001885  0.085995  0.001763  0.001763  0.005750   \n",
       "1    0.002763  0.002763  0.006005  0.013765  0.002763  0.002763  0.004971   \n",
       "2    0.000542  0.000542  0.000542  0.002399  0.000542  0.000542  0.000542   \n",
       "3    0.001364  0.001755  0.005015  0.003013  0.001364  0.001364  0.002170   \n",
       "4    0.000555  0.001867  0.000986  0.037658  0.000555  0.000555  0.000555   \n",
       "..        ...       ...       ...       ...       ...       ...       ...   \n",
       "485  0.000680  0.003641  0.001629  0.001380  0.000680  0.000680  0.000847   \n",
       "486  0.005055  0.006028  0.001926  0.000926  0.000926  0.001110  0.001081   \n",
       "487  0.000749  0.007779  0.000970  0.072173  0.000749  0.000749  0.001344   \n",
       "488  0.001440  0.005405  0.002617  0.018678  0.001440  0.001629  0.007857   \n",
       "489  0.001814  0.004142  0.002815  0.025329  0.001814  0.001814  0.003113   \n",
       "\n",
       "            8         9        10        11        12        13        14  \n",
       "0    0.001959  0.001763  0.001763  0.001763  0.001763  0.879837  0.001763  \n",
       "1    0.002763  0.002763  0.002763  0.006295  0.002763  0.937251  0.002763  \n",
       "2    0.001678  0.004592  0.000542  0.060895  0.000542  0.921215  0.000542  \n",
       "3    0.001741  0.003636  0.001364  0.001752  0.001364  0.944423  0.001364  \n",
       "4    0.001275  0.000555  0.000796  0.000555  0.000555  0.946310  0.000555  \n",
       "..        ...       ...       ...       ...       ...       ...       ...  \n",
       "485  0.000819  0.000680  0.000870  0.001715  0.000680  0.969656  0.015239  \n",
       "486  0.000926  0.000926  0.002484  0.002329  0.000926  0.972581  0.001848  \n",
       "487  0.001997  0.000877  0.000749  0.003122  0.000749  0.906012  0.000928  \n",
       "488  0.027716  0.001440  0.002667  0.001718  0.007100  0.916947  0.001440  \n",
       "489  0.011405  0.001923  0.002473  0.001814  0.001814  0.933976  0.003816  \n",
       "\n",
       "[490 rows x 19 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_means_ratings.head(-10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROBLEM 1 part 2 \n",
    "\n",
    "from collections import Counter\n",
    "\n",
    "'''\n",
    "preparing data to plot topics by average rating\n",
    "'''\n",
    "\n",
    "# a list of all 500 novels' ratings (rounded to the nearest tenth)\n",
    "ratings_list = df_means_ratings['RATING'].tolist()\n",
    "\n",
    "# counting the ocurrences of each rating\n",
    "ratings_counts = list(Counter(ratings_list).values())\n",
    "\n",
    "# creating a new dataframe that groups the rows by rating\n",
    "df_grouped_by_ratings = df_means_ratings.groupby('RATING').sum()\n",
    "df_grouped_by_ratings = df_grouped_by_ratings.reset_index(drop=True)\n",
    "\n",
    "# adding a column detailing the number of novels with each rating, to faciliate normalization\n",
    "df_grouped_by_ratings['TOTAL'] = ratings_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>TOTAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000827</td>\n",
       "      <td>0.000964</td>\n",
       "      <td>0.028941</td>\n",
       "      <td>0.000889</td>\n",
       "      <td>0.004997</td>\n",
       "      <td>0.000932</td>\n",
       "      <td>0.000827</td>\n",
       "      <td>0.002216</td>\n",
       "      <td>0.001994</td>\n",
       "      <td>0.002195</td>\n",
       "      <td>0.000932</td>\n",
       "      <td>0.003538</td>\n",
       "      <td>0.000827</td>\n",
       "      <td>0.944142</td>\n",
       "      <td>0.005779</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000736</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>0.004954</td>\n",
       "      <td>0.002587</td>\n",
       "      <td>0.021570</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>0.002811</td>\n",
       "      <td>0.000765</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>0.004204</td>\n",
       "      <td>0.003265</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>0.956186</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.008898</td>\n",
       "      <td>0.005661</td>\n",
       "      <td>0.053489</td>\n",
       "      <td>0.009552</td>\n",
       "      <td>0.028938</td>\n",
       "      <td>0.005661</td>\n",
       "      <td>0.005661</td>\n",
       "      <td>0.007619</td>\n",
       "      <td>0.027687</td>\n",
       "      <td>0.011705</td>\n",
       "      <td>0.014251</td>\n",
       "      <td>0.040409</td>\n",
       "      <td>0.022390</td>\n",
       "      <td>5.751658</td>\n",
       "      <td>0.006420</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.205381</td>\n",
       "      <td>0.016898</td>\n",
       "      <td>0.114848</td>\n",
       "      <td>0.044256</td>\n",
       "      <td>0.127623</td>\n",
       "      <td>0.018731</td>\n",
       "      <td>0.054916</td>\n",
       "      <td>0.069220</td>\n",
       "      <td>0.072185</td>\n",
       "      <td>0.027002</td>\n",
       "      <td>0.058195</td>\n",
       "      <td>0.071285</td>\n",
       "      <td>0.037818</td>\n",
       "      <td>19.037053</td>\n",
       "      <td>0.044589</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.139364</td>\n",
       "      <td>0.017914</td>\n",
       "      <td>0.042477</td>\n",
       "      <td>0.030152</td>\n",
       "      <td>0.061612</td>\n",
       "      <td>0.033909</td>\n",
       "      <td>0.025037</td>\n",
       "      <td>0.039565</td>\n",
       "      <td>0.037340</td>\n",
       "      <td>0.026862</td>\n",
       "      <td>0.048482</td>\n",
       "      <td>0.094114</td>\n",
       "      <td>0.018729</td>\n",
       "      <td>15.346960</td>\n",
       "      <td>0.037483</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.173907</td>\n",
       "      <td>0.062844</td>\n",
       "      <td>0.323243</td>\n",
       "      <td>0.103531</td>\n",
       "      <td>0.534146</td>\n",
       "      <td>0.052539</td>\n",
       "      <td>0.068283</td>\n",
       "      <td>0.181987</td>\n",
       "      <td>0.123016</td>\n",
       "      <td>0.186112</td>\n",
       "      <td>0.115443</td>\n",
       "      <td>0.214915</td>\n",
       "      <td>0.075307</td>\n",
       "      <td>47.692820</td>\n",
       "      <td>0.091907</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.365690</td>\n",
       "      <td>0.062429</td>\n",
       "      <td>0.357284</td>\n",
       "      <td>0.116718</td>\n",
       "      <td>0.528234</td>\n",
       "      <td>0.090538</td>\n",
       "      <td>0.085025</td>\n",
       "      <td>0.189705</td>\n",
       "      <td>0.171054</td>\n",
       "      <td>0.240158</td>\n",
       "      <td>0.132879</td>\n",
       "      <td>0.171649</td>\n",
       "      <td>0.063594</td>\n",
       "      <td>52.323542</td>\n",
       "      <td>0.101501</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.275040</td>\n",
       "      <td>0.072149</td>\n",
       "      <td>0.403122</td>\n",
       "      <td>0.107246</td>\n",
       "      <td>0.895628</td>\n",
       "      <td>0.129641</td>\n",
       "      <td>0.097056</td>\n",
       "      <td>0.233660</td>\n",
       "      <td>0.162580</td>\n",
       "      <td>0.099881</td>\n",
       "      <td>0.120327</td>\n",
       "      <td>0.237973</td>\n",
       "      <td>0.086016</td>\n",
       "      <td>59.967452</td>\n",
       "      <td>0.112232</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.387373</td>\n",
       "      <td>0.069899</td>\n",
       "      <td>0.262808</td>\n",
       "      <td>0.119969</td>\n",
       "      <td>0.525206</td>\n",
       "      <td>0.066105</td>\n",
       "      <td>0.080899</td>\n",
       "      <td>0.164050</td>\n",
       "      <td>0.209580</td>\n",
       "      <td>0.089567</td>\n",
       "      <td>0.111585</td>\n",
       "      <td>0.266796</td>\n",
       "      <td>0.119223</td>\n",
       "      <td>50.407789</td>\n",
       "      <td>0.119152</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.433243</td>\n",
       "      <td>0.077112</td>\n",
       "      <td>0.374042</td>\n",
       "      <td>0.130617</td>\n",
       "      <td>0.686755</td>\n",
       "      <td>0.079734</td>\n",
       "      <td>0.091915</td>\n",
       "      <td>0.189267</td>\n",
       "      <td>0.278680</td>\n",
       "      <td>0.140867</td>\n",
       "      <td>0.149938</td>\n",
       "      <td>0.246050</td>\n",
       "      <td>0.080461</td>\n",
       "      <td>66.863933</td>\n",
       "      <td>0.177385</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.425967</td>\n",
       "      <td>0.130072</td>\n",
       "      <td>0.266331</td>\n",
       "      <td>0.136609</td>\n",
       "      <td>0.700114</td>\n",
       "      <td>0.107320</td>\n",
       "      <td>0.103780</td>\n",
       "      <td>0.194199</td>\n",
       "      <td>0.166395</td>\n",
       "      <td>0.122549</td>\n",
       "      <td>0.149520</td>\n",
       "      <td>0.279088</td>\n",
       "      <td>0.090001</td>\n",
       "      <td>58.012069</td>\n",
       "      <td>0.115986</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.416487</td>\n",
       "      <td>0.075291</td>\n",
       "      <td>0.194025</td>\n",
       "      <td>0.089727</td>\n",
       "      <td>0.730403</td>\n",
       "      <td>0.050490</td>\n",
       "      <td>0.066270</td>\n",
       "      <td>0.155060</td>\n",
       "      <td>0.138236</td>\n",
       "      <td>0.091080</td>\n",
       "      <td>0.068034</td>\n",
       "      <td>0.235501</td>\n",
       "      <td>0.068498</td>\n",
       "      <td>46.542337</td>\n",
       "      <td>0.078561</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.245692</td>\n",
       "      <td>0.039052</td>\n",
       "      <td>0.216212</td>\n",
       "      <td>0.113402</td>\n",
       "      <td>0.549557</td>\n",
       "      <td>0.043782</td>\n",
       "      <td>0.043261</td>\n",
       "      <td>0.071891</td>\n",
       "      <td>0.090572</td>\n",
       "      <td>0.076246</td>\n",
       "      <td>0.072022</td>\n",
       "      <td>0.228117</td>\n",
       "      <td>0.076715</td>\n",
       "      <td>35.077280</td>\n",
       "      <td>0.056199</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.028175</td>\n",
       "      <td>0.022974</td>\n",
       "      <td>0.070066</td>\n",
       "      <td>0.036605</td>\n",
       "      <td>0.213300</td>\n",
       "      <td>0.019286</td>\n",
       "      <td>0.023658</td>\n",
       "      <td>0.045019</td>\n",
       "      <td>0.070136</td>\n",
       "      <td>0.031296</td>\n",
       "      <td>0.031886</td>\n",
       "      <td>0.093447</td>\n",
       "      <td>0.024336</td>\n",
       "      <td>13.266201</td>\n",
       "      <td>0.023615</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.019274</td>\n",
       "      <td>0.013283</td>\n",
       "      <td>0.009012</td>\n",
       "      <td>0.007250</td>\n",
       "      <td>0.099735</td>\n",
       "      <td>0.004073</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>0.006906</td>\n",
       "      <td>0.009511</td>\n",
       "      <td>0.015382</td>\n",
       "      <td>0.004747</td>\n",
       "      <td>0.013079</td>\n",
       "      <td>0.003692</td>\n",
       "      <td>3.785735</td>\n",
       "      <td>0.004523</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           0         1         2         3         4         5         6  \\\n",
       "0   0.000827  0.000964  0.028941  0.000889  0.004997  0.000932  0.000827   \n",
       "1   0.000736  0.000487  0.004954  0.002587  0.021570  0.000487  0.000487   \n",
       "2   0.008898  0.005661  0.053489  0.009552  0.028938  0.005661  0.005661   \n",
       "3   0.205381  0.016898  0.114848  0.044256  0.127623  0.018731  0.054916   \n",
       "4   0.139364  0.017914  0.042477  0.030152  0.061612  0.033909  0.025037   \n",
       "5   0.173907  0.062844  0.323243  0.103531  0.534146  0.052539  0.068283   \n",
       "6   0.365690  0.062429  0.357284  0.116718  0.528234  0.090538  0.085025   \n",
       "7   0.275040  0.072149  0.403122  0.107246  0.895628  0.129641  0.097056   \n",
       "8   0.387373  0.069899  0.262808  0.119969  0.525206  0.066105  0.080899   \n",
       "9   0.433243  0.077112  0.374042  0.130617  0.686755  0.079734  0.091915   \n",
       "10  0.425967  0.130072  0.266331  0.136609  0.700114  0.107320  0.103780   \n",
       "11  0.416487  0.075291  0.194025  0.089727  0.730403  0.050490  0.066270   \n",
       "12  0.245692  0.039052  0.216212  0.113402  0.549557  0.043782  0.043261   \n",
       "13  0.028175  0.022974  0.070066  0.036605  0.213300  0.019286  0.023658   \n",
       "14  0.019274  0.013283  0.009012  0.007250  0.099735  0.004073  0.003798   \n",
       "\n",
       "           7         8         9        10        11        12         13  \\\n",
       "0   0.002216  0.001994  0.002195  0.000932  0.003538  0.000827   0.944142   \n",
       "1   0.002811  0.000765  0.000487  0.004204  0.003265  0.000487   0.956186   \n",
       "2   0.007619  0.027687  0.011705  0.014251  0.040409  0.022390   5.751658   \n",
       "3   0.069220  0.072185  0.027002  0.058195  0.071285  0.037818  19.037053   \n",
       "4   0.039565  0.037340  0.026862  0.048482  0.094114  0.018729  15.346960   \n",
       "5   0.181987  0.123016  0.186112  0.115443  0.214915  0.075307  47.692820   \n",
       "6   0.189705  0.171054  0.240158  0.132879  0.171649  0.063594  52.323542   \n",
       "7   0.233660  0.162580  0.099881  0.120327  0.237973  0.086016  59.967452   \n",
       "8   0.164050  0.209580  0.089567  0.111585  0.266796  0.119223  50.407789   \n",
       "9   0.189267  0.278680  0.140867  0.149938  0.246050  0.080461  66.863933   \n",
       "10  0.194199  0.166395  0.122549  0.149520  0.279088  0.090001  58.012069   \n",
       "11  0.155060  0.138236  0.091080  0.068034  0.235501  0.068498  46.542337   \n",
       "12  0.071891  0.090572  0.076246  0.072022  0.228117  0.076715  35.077280   \n",
       "13  0.045019  0.070136  0.031296  0.031886  0.093447  0.024336  13.266201   \n",
       "14  0.006906  0.009511  0.015382  0.004747  0.013079  0.003692   3.785735   \n",
       "\n",
       "          14  TOTAL  \n",
       "0   0.005779     61  \n",
       "1   0.000487     37  \n",
       "2   0.006420     53  \n",
       "3   0.044589     63  \n",
       "4   0.037483     70  \n",
       "5   0.091907     50  \n",
       "6   0.101501     49  \n",
       "7   0.112232     16  \n",
       "8   0.119152     14  \n",
       "9   0.177385     55  \n",
       "10  0.115986     20  \n",
       "11  0.078561      6  \n",
       "12  0.056199      1  \n",
       "13  0.023615      4  \n",
       "14  0.004523      1  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_grouped_by_ratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PROBLEM 1 part 2 \n",
    "\n",
    "import pylab as plt\n",
    "\n",
    "'''\n",
    "defining a helper function to normalize and plot the topic frequency by average rating\n",
    "'''\n",
    "\n",
    "def normalize_and_plot(desired_topics):\n",
    "    \n",
    "    # normalizing the topic frequency by the number of novels with each average rating\n",
    "    df_normalized = df_grouped_by_ratings[desired_topics].div(df_grouped_by_ratings.TOTAL, axis=0)\n",
    "    \n",
    "    df_normalized.head(10)\n",
    "\n",
    "    counts_by_topic = []\n",
    "\n",
    "    # iterating through the desired topics and appending its frequency (based on average rating) to counts_by_topic\n",
    "    for i in desired_topics:\n",
    "        cur_topic_counts = df_normalized[i].tolist()\n",
    "        counts_by_topic.append(cur_topic_counts)\n",
    "\n",
    "    # retrieving a list of the ratings in ascending order, for the x-axis\n",
    "    ratings = sorted(list(set(df_means_ratings['RATING'].tolist())))\n",
    "    \n",
    "    # iterating through the desired topics and plotting each one's frequency (with the novels'\n",
    "    # average rating as the independent variable)\n",
    "    for i in range(len(desired_topics)):\n",
    "        plt.plot(ratings, counts_by_topic[i], label = 'TOPIC ' + str(desired_topics[i]))\n",
    "\n",
    "    # finishing touches of the graph\n",
    "    plt.legend(loc='upper left')\n",
    "    plt.title(\"Topic Frequency Across Average Ratings\")\n",
    "    plt.show()\n",
    "\n",
    "# plotting the topic frequency of topics 0, 2, 4, and 7 (y-axis) based on average rating (x-axis)\n",
    "normalize_and_plot([0, 2, 4, 7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting the topic frequency of topics 2, 4, and 7 (y-axis) based on average rating (x-axis)\n",
    "normalize_and_plot([0, 2, 7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nWhen choosing which topics to graph against the novels' average ratings, I\\nI chose topics 0, 2, 4, 7. I found the latter 3 to be the most cogent among\\nthe 15 I found. Here are the general labels/themes I attributed to each based\\non the following words I picked out.\\n\\n    Topic 2: systematic opppression and suffering in the american south\\n    - katrina, hurricane\\n    - housing, neighborhoods, street\\n    - city, government\\n    - poverty, poor, segregation, gentrification\\n    \\n    Topic 4: patriarchal institutions\\n    - his, he\\n    - civil, war, american, rights, states\\n    - washington, obama, states, president\\n    - https, wikipedia, wiki\\n    \\n    Topic 7: threatening auras\\n    - fascism, portland\\n    - witch, leopard\\n    \\n    \\nI decided to also included topic 0 in my analysis as a sort of wildcard, since I\\nwasn't sure what to make of it despite the fact that it was composed of words in\\nspanish (de que la en el no un me es una se â³n los con por lo su libro mã para).\\n\\nWhile all four of the topics follow a general trend of rising around the 4.0 rating\\nmark and spiking at the 4.5 mark, I found it interesting that the frequency of \\ntopic 0 was so great that it completely flattened the shape of the graphs of the\\nother topics. I'm not too sure what to make of this in terms of analysis besides\\nthe fact that perhaps my sample took too many spanish reviews. It's interesting to\\nsee, though, that there were enough spanish reviews (or reviews featuring spanish)\\nto create its own topic within the 10k others.\\n\""
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ------------------------ Experiment 1 ------------------------ #\n",
    "\n",
    "'''\n",
    "Explanation:\n",
    "\n",
    "When choosing which topics to graph against the novels' average ratings, I\n",
    "I chose topics 0, 2, 4, 7. I found the latter 3 to be the most cogent among\n",
    "the 15 I found. Here are the general labels/themes I attributed to each based\n",
    "on the following words I picked out.\n",
    "\n",
    "    Topic 2: systematic opppression and suffering in the american south\n",
    "    - katrina, hurricane\n",
    "    - housing, neighborhoods, street\n",
    "    - city, government\n",
    "    - poverty, poor, segregation, gentrification\n",
    "    \n",
    "    Topic 4: patriarchal institutions\n",
    "    - his, he\n",
    "    - civil, war, american, rights, states\n",
    "    - washington, obama, states, president\n",
    "    - https, wikipedia, wiki\n",
    "    \n",
    "    Topic 7: threatening auras\n",
    "    - fascism, portland\n",
    "    - witch, leopard\n",
    "    \n",
    "    \n",
    "I decided to also included topic 0 in my analysis as a sort of wildcard, since I\n",
    "wasn't sure what to make of it besides the fact that it's composed of words in\n",
    "spanish (de que la en el no un me es una se â³n los con por lo su libro mã para).\n",
    "'''\n",
    "\n",
    "'''\n",
    "Reflection:\n",
    "\n",
    "All four topics follow a general trend of rising around the 4.0 rating\n",
    "mark and spiking around 4.5. I suppose this makes sense as higher-rated, #BLM-tagged\n",
    "novels ought to arouse more discussion/commentary on such themes as systematic\n",
    "oppression, patriarchal institutions, and threat.\n",
    "\n",
    "While there doesn't seem to be a topic that is distinctly more frequent among\n",
    "(relatively) lower-rated novels, I also found it interesting to compare the topics'\n",
    "relative magnitudes/sizes. As expected, the topic of patriarchal institutions was well \n",
    "represented among the reviews for novels tagged #BLM. What's surprising to me, however,\n",
    "is the fact that topic 2, system oppression and suffering in the american south, seems\n",
    "less well represented than the wildcard topic 0 of spanish words. Perhaps there was\n",
    "a lot of spanish support for #BLM novels as those who speak spanish are often \n",
    "visible minorities. In any case, it's interesting to see that there were enough \n",
    "reviews in spanish to create its own topic within 10k reviews.\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "##### PROBLEM 1 part 3\n",
    "##### start of experiment #2: running LDA topic modelling on ~10k 2 or 1-starred reviews ONLY\n",
    "\n",
    "'''\n",
    "re-starting the topic modeling process, but only using reviews that gave the relevant novel <= 2 stars (out of 5)\n",
    "'''\n",
    "\n",
    "# a list for the contents of ~10k reviews with <= 2 stars\n",
    "texts_low_reviews = []\n",
    "\n",
    "# a new dataframe to store information about ~10k reviews with <= 2 stars\n",
    "df_low_reviews = pd.DataFrame(columns = ['review_date', 'review_sentiments', 'review_rating', 'review_content', 'file_id'])\n",
    "\n",
    "# ------------------------- populating the list and dataframe ------------------------ #\n",
    "\n",
    "# iterating through each novel\n",
    "for csv in csv_files:\n",
    "    \n",
    "    # the path to the novel's csv file of reviews\n",
    "    csv_filepath = path_csvs + csv + '.csv'\n",
    "    \n",
    "    # reading the current novel's csv file of reviews and saving only certain columns\n",
    "    cur_csv = pd.read_csv(csv_filepath, encoding = 'latin1')\n",
    "    cur_csv = cur_csv[['review_date', 'review_sentiments', 'review_rating', 'review_content']]\n",
    "    \n",
    "    # adding a new column with the current csv file's name\n",
    "    cur_csv['file_id'] = csv\n",
    "    \n",
    "    # making a copy of the current csv, but only with rows whose review_rating value is <= 2\n",
    "    cur_csv_low = cur_csv.loc[cur_csv['review_rating'] <= 2]\n",
    "    \n",
    "    # saving only the first 20 reviews, for computing power purposes\n",
    "    cur_csv_low = cur_csv_low[:20]\n",
    "    \n",
    "    # concatenating the current novel's reviews to the larger dataframes\n",
    "    df_low_reviews = pd.concat([df_low_reviews, cur_csv_low])\n",
    "    \n",
    "    # adding the contents of the current novel's first 20 reviews (with <= 2 stars) to a list\n",
    "    texts_low_reviews.extend(cur_csv_low['review_content'].tolist())\n",
    "    \n",
    "# resetting the indices of the larger dataframes\n",
    "df_low_reviews = df_low_reviews.reset_index(drop=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_date</th>\n",
       "      <th>review_sentiments</th>\n",
       "      <th>review_rating</th>\n",
       "      <th>review_content</th>\n",
       "      <th>file_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jun 08, 2015</td>\n",
       "      <td>did not like it</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Boring AF! -at least to me- !</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Apr 02, 2018</td>\n",
       "      <td>it was ok</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Aww man, this book was boring AF!! That little...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nov 24, 2020</td>\n",
       "      <td>it was ok</td>\n",
       "      <td>2.0</td>\n",
       "      <td>I read it last year for AP English. There are ...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Jan 17, 2020</td>\n",
       "      <td>it was ok</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.5/5 I get there's a lot of people that love ...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jul 04, 2021</td>\n",
       "      <td>did not like it</td>\n",
       "      <td>1.0</td>\n",
       "      <td>I read the 50th anniversary paperback edition ...</td>\n",
       "      <td>BLM_001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9501</th>\n",
       "      <td>Jul 26, 2021</td>\n",
       "      <td>it was ok</td>\n",
       "      <td>2.0</td>\n",
       "      <td>I like the author a lot. I've heard him on num...</td>\n",
       "      <td>BLM_500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9502</th>\n",
       "      <td>Apr 24, 2018</td>\n",
       "      <td>it was ok</td>\n",
       "      <td>2.0</td>\n",
       "      <td>*kindly pause*Love the fact that this book was...</td>\n",
       "      <td>BLM_500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9503</th>\n",
       "      <td>Dec 05, 2016</td>\n",
       "      <td>it was ok</td>\n",
       "      <td>2.0</td>\n",
       "      <td>I did not get this book. I heard it highly rec...</td>\n",
       "      <td>BLM_500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504</th>\n",
       "      <td>Dec 29, 2015</td>\n",
       "      <td>it was ok</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Long Division had a lot going on that I didn't...</td>\n",
       "      <td>BLM_500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9505</th>\n",
       "      <td>Jun 16, 2014</td>\n",
       "      <td>it was ok</td>\n",
       "      <td>2.0</td>\n",
       "      <td>so look, this is kind of genius, the genius bo...</td>\n",
       "      <td>BLM_500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9506 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       review_date review_sentiments  review_rating  \\\n",
       "0     Jun 08, 2015   did not like it            1.0   \n",
       "1     Apr 02, 2018         it was ok            2.0   \n",
       "2     Nov 24, 2020         it was ok            2.0   \n",
       "3     Jan 17, 2020         it was ok            2.0   \n",
       "4     Jul 04, 2021   did not like it            1.0   \n",
       "...            ...               ...            ...   \n",
       "9501  Jul 26, 2021         it was ok            2.0   \n",
       "9502  Apr 24, 2018         it was ok            2.0   \n",
       "9503  Dec 05, 2016         it was ok            2.0   \n",
       "9504  Dec 29, 2015         it was ok            2.0   \n",
       "9505  Jun 16, 2014         it was ok            2.0   \n",
       "\n",
       "                                         review_content  file_id  \n",
       "0                         Boring AF! -at least to me- !  BLM_001  \n",
       "1     Aww man, this book was boring AF!! That little...  BLM_001  \n",
       "2     I read it last year for AP English. There are ...  BLM_001  \n",
       "3     1.5/5 I get there's a lot of people that love ...  BLM_001  \n",
       "4     I read the 50th anniversary paperback edition ...  BLM_001  \n",
       "...                                                 ...      ...  \n",
       "9501  I like the author a lot. I've heard him on num...  BLM_500  \n",
       "9502  *kindly pause*Love the fact that this book was...  BLM_500  \n",
       "9503  I did not get this book. I heard it highly rec...  BLM_500  \n",
       "9504  Long Division had a lot going on that I didn't...  BLM_500  \n",
       "9505  so look, this is kind of genius, the genius bo...  BLM_500  \n",
       "\n",
       "[9506 rows x 5 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_low_reviews.head(-10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROBLEM 1 part 3\n",
    "\n",
    "'''\n",
    "using my previously defined helper functions to run the LDA pipeline\n",
    "'''\n",
    "\n",
    "# vectorizing the texts\n",
    "tf_low, tf_feature_names_low = vectorize(texts_low_reviews)\n",
    "\n",
    "# running LDA topic modelling\n",
    "lda_W_low, lda_H_low = run_lda(tf_low)\n",
    "\n",
    "# normalizing topic distribution\n",
    "topics_low = display_topics(lda_H_low, lda_W_low, tf_feature_names_low, texts_low_reviews, no_top_words)\n",
    "\n",
    "# creating a dataframe of the 2 and 1-star reviews\n",
    "df_topics_low = pd.concat([df_low_reviews, clean_topic_dst(lda_W_low)], axis = 1)\n",
    "\n",
    "# making a dataframe that averages the topic frequencies from the reviews for each of the 500 novels\n",
    "df_means = make_means_df(df_topics_low)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Topic 0:',\n",
       "  'the and to it of this was book that in but is for not like me with just so as'),\n",
       " ('Topic 1:',\n",
       "  'la que de ashley no lina felix nishat aster en sephy el â³n rico portia callum libertie josephine â³ los'),\n",
       " ('Topic 2:',\n",
       "  'hayes suzette hobbs kalinda draper birdie lionel shadowshaper copper carolineã senna finland rafaela caucasia emil ty toby lea draperã copied'),\n",
       " ('Topic 3:',\n",
       "  'the to and her is she of in that he his with they are who you people for their about'),\n",
       " ('Topic 4:',\n",
       "  'theo cole maddie zeitoun deka phoebe kincaid antigua alicia spiderman kezi portia opal digital tav edinburgh antiguans deathshrieks nev halti'),\n",
       " ('Topic 5:',\n",
       "  'jade buck serapio lakewood thabiso nyasha xiala sales tambu naledi roanhorse lacey devon maxine teek toddlers brian aces clyde naranpa'),\n",
       " ('Topic 6:',\n",
       "  'kiera cassie stacey abrams lillian logan papa steph ernie sankofa boycott grandpop barnett wallaces logans subcontinent gaming raj illori shaw'),\n",
       " ('Topic 7:',\n",
       "  'rue younge varina ghizon habib conjure atakora teaspoon cleaver baking specifying brer afia graham 1800ã detour 267this belaboring selfã antisemitism'),\n",
       " ('Topic 8:',\n",
       "  'hatta fabiola frannie henri langton kasim corinne tharoor dray waheed cramps chess dreamwalker tharoorã meg li haar benham indiaã samson'),\n",
       " ('Topic 9:',\n",
       "  'layla zoe afi marable eli wakanda liberia challa ahmed zoeã elikem liberian afiã welteroth muna mash dora stelfreeze mish serena'),\n",
       " ('Topic 10:',\n",
       "  'the of and to in is that this as book it for not his on are be an with but'),\n",
       " ('Topic 11:',\n",
       "  'doro onye michel mwita pheby anyanwu basquiat kozol onyeã onyesonwu luyu doroã richmond diti javaka jailer okeke sorcerer lumpkin fgm'),\n",
       " ('Topic 12:',\n",
       "  'sunny claudia monday ryann wonderland bree alexandria arrah karina norris tristan tyson korean samiah agent retta isabella okorafor rudjek jende'),\n",
       " ('Topic 13:',\n",
       "  'binti zuri azere meduse rafael okwu dumas darius karamo tariq vivek spider himba uni zoboi otjize locke ship bluebird edan'),\n",
       " ('Topic 14:',\n",
       "  'rae jupe coop althea maleeka patsy fanon viola latham tru issa osage 1921 lilith dreamland cicely grantã chernow peach finkelstein')]"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "topics_low"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FILE_ID</th>\n",
       "      <th>AUTHOR</th>\n",
       "      <th>TITLE</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLM_001</td>\n",
       "      <td>Harper Lee</td>\n",
       "      <td>To Kill a Mockingbird</td>\n",
       "      <td>0.722617</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.095059</td>\n",
       "      <td>0.002121</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.159001</td>\n",
       "      <td>0.005012</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.003226</td>\n",
       "      <td>0.001440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BLM_002</td>\n",
       "      <td>Kathryn Stockett</td>\n",
       "      <td>The Help</td>\n",
       "      <td>0.596916</td>\n",
       "      <td>0.019829</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.135597</td>\n",
       "      <td>0.005100</td>\n",
       "      <td>0.004020</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.233292</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.000583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BLM_003</td>\n",
       "      <td>Angie Thomas</td>\n",
       "      <td>The Hate U Give</td>\n",
       "      <td>0.709287</td>\n",
       "      <td>0.001185</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.152338</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.132369</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.001175</td>\n",
       "      <td>0.000365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BLM_004</td>\n",
       "      <td>Celeste Ng</td>\n",
       "      <td>Little Fires Everywhere</td>\n",
       "      <td>0.790968</td>\n",
       "      <td>0.010302</td>\n",
       "      <td>0.003314</td>\n",
       "      <td>0.142450</td>\n",
       "      <td>0.001755</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>0.038647</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>0.003443</td>\n",
       "      <td>0.001140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLM_005</td>\n",
       "      <td>Michelle Obama</td>\n",
       "      <td>Becoming</td>\n",
       "      <td>0.530676</td>\n",
       "      <td>0.003512</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>0.376941</td>\n",
       "      <td>0.002648</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>0.078528</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>0.003016</td>\n",
       "      <td>0.000520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>475</th>\n",
       "      <td>BLM_476</td>\n",
       "      <td>Nikki Giovanni</td>\n",
       "      <td>Rosa</td>\n",
       "      <td>0.829764</td>\n",
       "      <td>0.001218</td>\n",
       "      <td>0.001153</td>\n",
       "      <td>0.042099</td>\n",
       "      <td>0.012878</td>\n",
       "      <td>0.001153</td>\n",
       "      <td>0.002411</td>\n",
       "      <td>0.001153</td>\n",
       "      <td>0.001153</td>\n",
       "      <td>0.001153</td>\n",
       "      <td>0.091654</td>\n",
       "      <td>0.001153</td>\n",
       "      <td>0.008515</td>\n",
       "      <td>0.002045</td>\n",
       "      <td>0.002495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>476</th>\n",
       "      <td>BLM_477</td>\n",
       "      <td>Z.Z. Packer</td>\n",
       "      <td>Drinking Coffee Elsewhere</td>\n",
       "      <td>0.599186</td>\n",
       "      <td>0.001728</td>\n",
       "      <td>0.002650</td>\n",
       "      <td>0.044601</td>\n",
       "      <td>0.014349</td>\n",
       "      <td>0.001728</td>\n",
       "      <td>0.001728</td>\n",
       "      <td>0.001728</td>\n",
       "      <td>0.001728</td>\n",
       "      <td>0.001849</td>\n",
       "      <td>0.320390</td>\n",
       "      <td>0.001728</td>\n",
       "      <td>0.001838</td>\n",
       "      <td>0.002608</td>\n",
       "      <td>0.002162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477</th>\n",
       "      <td>BLM_478</td>\n",
       "      <td>Michael W. Twitty</td>\n",
       "      <td>The Cooking Gene: A Journey Through African Am...</td>\n",
       "      <td>0.894050</td>\n",
       "      <td>0.003959</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>0.064031</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>0.001411</td>\n",
       "      <td>0.000990</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>0.026015</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>0.001512</td>\n",
       "      <td>0.001608</td>\n",
       "      <td>0.003546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478</th>\n",
       "      <td>BLM_479</td>\n",
       "      <td>Amanda  Joy</td>\n",
       "      <td>A River of Royal Blood</td>\n",
       "      <td>0.620089</td>\n",
       "      <td>0.001340</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>0.031197</td>\n",
       "      <td>0.001959</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>0.001128</td>\n",
       "      <td>0.337049</td>\n",
       "      <td>0.000866</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>0.000797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>479</th>\n",
       "      <td>BLM_480</td>\n",
       "      <td>Deirdre Mask</td>\n",
       "      <td>The Address Book: What Street Addresses Reveal...</td>\n",
       "      <td>0.568058</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.021882</td>\n",
       "      <td>0.003868</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.389264</td>\n",
       "      <td>0.001805</td>\n",
       "      <td>0.001619</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.001500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>480 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     FILE_ID             AUTHOR  \\\n",
       "0    BLM_001         Harper Lee   \n",
       "1    BLM_002   Kathryn Stockett   \n",
       "2    BLM_003       Angie Thomas   \n",
       "3    BLM_004         Celeste Ng   \n",
       "4    BLM_005     Michelle Obama   \n",
       "..       ...                ...   \n",
       "475  BLM_476     Nikki Giovanni   \n",
       "476  BLM_477        Z.Z. Packer   \n",
       "477  BLM_478  Michael W. Twitty   \n",
       "478  BLM_479        Amanda  Joy   \n",
       "479  BLM_480       Deirdre Mask   \n",
       "\n",
       "                                                 TITLE         0         1  \\\n",
       "0                                To Kill a Mockingbird  0.722617  0.001440   \n",
       "1                                             The Help  0.596916  0.019829   \n",
       "2                                      The Hate U Give  0.709287  0.001185   \n",
       "3                              Little Fires Everywhere  0.790968  0.010302   \n",
       "4                                             Becoming  0.530676  0.003512   \n",
       "..                                                 ...       ...       ...   \n",
       "475                                               Rosa  0.829764  0.001218   \n",
       "476                          Drinking Coffee Elsewhere  0.599186  0.001728   \n",
       "477  The Cooking Gene: A Journey Through African Am...  0.894050  0.003959   \n",
       "478                             A River of Royal Blood  0.620089  0.001340   \n",
       "479  The Address Book: What Street Addresses Reveal...  0.568058  0.001500   \n",
       "\n",
       "            2         3         4         5         6         7         8  \\\n",
       "0    0.001440  0.095059  0.002121  0.001440  0.001440  0.001440  0.001440   \n",
       "1    0.000583  0.135597  0.005100  0.004020  0.000583  0.000583  0.000583   \n",
       "2    0.000365  0.152338  0.000365  0.000365  0.000365  0.000365  0.000365   \n",
       "3    0.003314  0.142450  0.001755  0.001140  0.001140  0.001140  0.001140   \n",
       "4    0.000520  0.376941  0.002648  0.000520  0.000520  0.000520  0.000520   \n",
       "..        ...       ...       ...       ...       ...       ...       ...   \n",
       "475  0.001153  0.042099  0.012878  0.001153  0.002411  0.001153  0.001153   \n",
       "476  0.002650  0.044601  0.014349  0.001728  0.001728  0.001728  0.001728   \n",
       "477  0.000480  0.064031  0.000480  0.001411  0.000990  0.000480  0.000480   \n",
       "478  0.000797  0.031197  0.001959  0.000797  0.000797  0.000797  0.000797   \n",
       "479  0.001500  0.021882  0.003868  0.001500  0.001500  0.001500  0.001500   \n",
       "\n",
       "            9        10        11        12        13        14  \n",
       "0    0.001440  0.159001  0.005012  0.001440  0.003226  0.001440  \n",
       "1    0.000583  0.233292  0.000583  0.000583  0.000583  0.000583  \n",
       "2    0.000365  0.132369  0.000365  0.000365  0.001175  0.000365  \n",
       "3    0.001140  0.038647  0.001140  0.001140  0.003443  0.001140  \n",
       "4    0.000520  0.078528  0.000520  0.000520  0.003016  0.000520  \n",
       "..        ...       ...       ...       ...       ...       ...  \n",
       "475  0.001153  0.091654  0.001153  0.008515  0.002045  0.002495  \n",
       "476  0.001849  0.320390  0.001728  0.001838  0.002608  0.002162  \n",
       "477  0.000480  0.026015  0.000480  0.001512  0.001608  0.003546  \n",
       "478  0.001128  0.337049  0.000866  0.000797  0.000797  0.000797  \n",
       "479  0.001500  0.389264  0.001805  0.001619  0.001500  0.001500  \n",
       "\n",
       "[480 rows x 18 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_means.head(-20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ------------------------ Experiment 2 ------------------------ #\n",
    "\n",
    "'''\n",
    "Explanation:\n",
    "As mentioned in the pre-explanation at the very start of my jupyter\n",
    "notebook, I thought it could be cool to run LDA topic modelling only\n",
    "on reviews that gave their respective novels 1 or 2 stars. I thought\n",
    "that these lower reviews would yield more interestingly (or at least\n",
    "more distinctly) negative topics.\n",
    "'''\n",
    "\n",
    "'''\n",
    "Reflection:\n",
    "None of the topics seemed to coalesced into a cogent group to which\n",
    "I could attribute a clear name/theme. That being said, I think it's\n",
    "incredibly interesting that these topics have a significanly larger\n",
    "number of names: ashley, lina, felix, kiera, cassie, jade, buck,\n",
    "clyde, layla, zoe, serena, michel, ernie, portia, spiferman, alicia,\n",
    "to name a few. It seems these negative reviews were more focused\n",
    "on the novels' characters and maybe their personal feelings for these\n",
    "fictions than the themes that the relevant stories were covering. \n",
    "'''"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
