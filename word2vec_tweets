{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\npart 1 (main work):\\nI run the Word2Vec algorithm on all 3 million tweets. I remove links\\nfrom the vectorized words for simplicity but leave stopwords.\\n\\npart 2 (experiment #1):\\nI test that my Word2Vec works by finding the closest word to \"peace\"\\nbut not \"republican\", and then the closest word to \"peace\" but not\\n\"democrat\"\\n\\npart 3 (experiment #2):\\nI plot the 20 closest words to \"trump\" and \"clinton\" based on their\\nproximity to \"bad\" along the x-axis and \"good\" along the y-axis\\n\\npart 4 (experiment #3):\\nI plot the 20 closest words to \"president\" based on their proximity\\nto \"democrat\" along the x-axis and \"republican\" along the y-axis\\n\\npart 5 (experiment #4):\\nI run the Word2Vec algorithm on all tweets originating from the\\nUnited States. I remove links from the vectorized words but leave\\nstopwords.\\n'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ------------------------ pre-explanation ------------------------ #\n",
    "\n",
    "'''\n",
    "part 1 (main work):\n",
    "I run the Word2Vec algorithm on all 3 million tweets. I remove links\n",
    "from the vectorized words for simplicity but leave stopwords.\n",
    "\n",
    "part 2 (experiment #1):\n",
    "I test that my Word2Vec works by finding the closest word to \"peace\"\n",
    "but not \"republican\", and then the closest word to \"peace\" but not\n",
    "\"democrat\"\n",
    "\n",
    "part 3 (experiment #2):\n",
    "I plot the 20 closest words to \"trump\" and \"clinton\" based on their\n",
    "proximity to \"bad\" along the x-axis and \"good\" along the y-axis\n",
    "\n",
    "part 4 (experiment #3):\n",
    "I plot the 20 closest words to \"president\" based on their proximity\n",
    "to \"democrat\" along the x-axis and \"republican\" along the y-axis\n",
    "\n",
    "part 5 (experiment #4):\n",
    "I run the Word2Vec algorithm on all tweets originating from the\n",
    "United States. I remove links from the vectorized words but leave\n",
    "stopwords.\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/faithrta/opt/anaconda3/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3444: DtypeWarning: Columns (0,15,20) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/faithrta/opt/anaconda3/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3444: DtypeWarning: Columns (20) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/faithrta/opt/anaconda3/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3444: DtypeWarning: Columns (10,20) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    }
   ],
   "source": [
    "# ------------------------ 1) main work ------------------------ #\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "'''\n",
    "reading in the tweets from all 13 csv files and appending their contents to a list\n",
    "'''\n",
    "\n",
    "# the filepath to the 13 csv files\n",
    "path = '/Users/faithrta/engl_490_python/russian-troll-tweets-master/'\n",
    "\n",
    "# a list to store all the tweets\n",
    "tweets = []\n",
    "\n",
    "# iterating through the numbers 1 to 13\n",
    "for i in range(1, 14):\n",
    "    \n",
    "    # creating a temporary df for the current csv\n",
    "    cur_csv = pd.read_csv(path + \"IRAhandle_tweets_\" + str(i) + \".csv\")\n",
    "    \n",
    "    # deleting all row entries that do not have any text under the 'content' column\n",
    "    cur_csv = cur_csv[cur_csv['content'].notna()]\n",
    "    \n",
    "    # adding all the tweets from this csv to the 'tweets' list\n",
    "    tweets.extend(cur_csv['content'].tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /Users/faithrta/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')\n",
    "\n",
    "'''\n",
    "tokenizing each sentence for every tweet\n",
    "'''\n",
    "\n",
    "# a list in which each eleement is a sentence\n",
    "sentences = [sentence for tweet in tweets for sentence in nltk.sent_tokenize(tweet)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "defining a helper function to quickly tokenize input text\n",
    "'''\n",
    "\n",
    "def fast_tokenize(text):\n",
    "    from string import punctuation\n",
    "    \n",
    "    # adding the '’' character to the list of punctuation to skip\n",
    "    punctuation = punctuation + \"’\" + \"‘\"\n",
    "\n",
    "    # iterating through the input text and removing punctuation characters\n",
    "    no_punct = ''.join([char for char in text if char not in punctuation])\n",
    "\n",
    "    # splitting text over whitespace into a list of words\n",
    "    tokens = no_punct.split()\n",
    "\n",
    "    return tokens\n",
    "\n",
    "# a list of lists in which each list contains the words of one sentence\n",
    "words_by_sentence = [fast_tokenize(sentence.lower()) for sentence in sentences]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "defining a helper function to remove links from list of lists of words\n",
    "'''\n",
    "\n",
    "# iterating through each list of words in words_by_sentence\n",
    "def remove_links(words_by_sentence):\n",
    "\n",
    "    for i in range(len(words_by_sentence)):\n",
    "        cur_sentence = words_by_sentence[i]\n",
    "\n",
    "        new_sentence = [word for word in cur_sentence if not word.startswith(\"https\")]\n",
    "\n",
    "        words_by_sentence[i] = new_sentence\n",
    "        \n",
    "    return words_by_sentence\n",
    "\n",
    "# removing all the links from the words in words_by_sentence\n",
    "words_by_sentence = remove_links(words_by_sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gensim\n",
    "\n",
    "'''\n",
    "running Word2Vec on the list of lists (in which each sublist contains the words of one sentence)\n",
    "'''\n",
    "\n",
    "model = gensim.models.Word2Vec(words_by_sentence, window=5, min_count=5, sg=0, alpha=0.025, batch_words=10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The closest word to \"peace\" but not \"republican\": mercy\n",
      "The closest word to \"peace\" but not \"democrat\": gratitude\n"
     ]
    }
   ],
   "source": [
    "# ------------------------ 2) first experiment ------------------------ #\n",
    "\n",
    "peace_not_repub = model.wv.most_similar(positive=['peace'], negative=['republican'], topn=1)\n",
    "peace_not_dem = model.wv.most_similar(positive=['peace'], negative=['democrat'], topn=1)\n",
    "\n",
    "print(\"The closest word to \\\"peace\\\" but not \\\"republican\\\": \" + peace_not_repub[0][0])\n",
    "print(\"The closest word to \\\"peace\\\" but not \\\"democrat\\\": \" + peace_not_dem[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nReflection:\\nThis experiment was mainly just to test that my Word2Vec worked. I found it\\ninteresting, though, that peace not associated with the word \"republican\"\\naligns with its definition whereas peace not associated with the word\\n\"democrat\" is somehow related to the russia/ukraine conflict (an ongoing\\nconflict that most would consider rather antithetical to peace). I\\'m assuming\\nit would have been in the Russian bots\\' interest to relate non-Republican peace\\nto falsehood, fragility, etc. and non-democrat Peace to longevity, sincerity,\\netc. but the vectorized words show that it was the other way around!\\n'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "Reflection:\n",
    "This experiment was mainly just to test that my Word2Vec worked. I found it\n",
    "interesting, though, that peace not associated with the word \"republican\"\n",
    "aligns with its definition whereas peace not associated with the word\n",
    "\"democrat\" is somehow related to the russia/ukraine conflict (which most\n",
    "would consider rather antithetical to peace). I'm assuming\n",
    "it would have been in the Russian bots' interest to relate non-Republican peace\n",
    "to falsehood, fragility, etc. and non-democrat peace to longevity, sincerity,\n",
    "etc. but the vectorized words show that it was the other way around!\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ------------------------ 3) second experiment ------------------------ #\n",
    "\n",
    "'''\n",
    "preparing data to be plotted\n",
    "'''\n",
    "\n",
    "# the top 20 most similar words to \"trump\" and \"clinton\" in the Word2Vec vector space\n",
    "terms = model.wv.most_similar(positive=['trump', 'clinton'], topn=20)\n",
    "\n",
    "# isolating only the words (and dropping their scores)\n",
    "terms = [word for word, score in terms]\n",
    "\n",
    "# lists to hold the scores of the words from 'terms' most similar to \"good\" and \"bad\"\n",
    "# in the Word2Vec vector space\n",
    "good_scores = []\n",
    "bad_scores = []\n",
    "\n",
    "# iterating through the words in 'terms' and appending each one's similarity to \"good\"\n",
    "for word in terms:\n",
    "    score = model.wv.similarity(word, 'good')\n",
    "    good_scores.append(score)\n",
    "    \n",
    "    # iterating through the words in 'terms' and appending each one's similarity to \"bad\"\n",
    "for word in terms:\n",
    "    score = model.wv.similarity(word, 'bad')\n",
    "    bad_scores.append(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "'''\n",
    "plotting the words closest to \"trump\" and \"clinton\" in the vector space based on their\n",
    "similarity to the words \"good\" and \"bad\" (value judgments)\n",
    "'''\n",
    "\n",
    "def plot_words(scores1, scores2, label1, label2, linspace):\n",
    "\n",
    "    plt.rcParams.update({'font.size': 12})\n",
    "    _, ax = plt.subplots(figsize=(15, 15))\n",
    "    ax.scatter(scores1, scores2)\n",
    "    plt.xlabel (label1)\n",
    "    plt.ylabel (label2)\n",
    "\n",
    "    x = np.linspace(0, linspace, 1000)\n",
    "    plt.plot(x, x + 0)\n",
    "\n",
    "    for i, txt in enumerate(terms):\n",
    "        ax.annotate(txt, (scores1[i], scores2[i]))\n",
    "        \n",
    "plot_words(good_scores, bad_scores, 'good', 'bad', 0.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nReflection:\\nThis experiment was pretty simple in that I wanted to see what words\\nassociated with the two presidential candidates were more positive\\n(proximal to \"good\") versus negative (proximal to \"bad\"). Interestingly,\\nthe only word that has a visually distinct proximity to the latter is\\n\"election\"! I would have assumed that there would be more Clinton-esque\\nfollowing this trend. Nevertheless, it makes sense that \"election\" tends\\ntowards \"bad\" as this is a simplified version of the Russian bots\\' goal:\\nto turn people against the American election system and standard\\nAmerican governmental structures in general.\\n'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "Reflection:\n",
    "This experiment was pretty simple in that I wanted to see what words\n",
    "associated with the two presidential candidates were more positive\n",
    "(proximal to \"good\") versus negative (proximal to \"bad\"). As expected,\n",
    "\"hilary\", \"obama\", and \"sanders\" are associated more with \"bad\" than\n",
    "\"good\" whereas \"realdonaldtrump\" is associated more with \"good\" than\n",
    "\"bad\". At first I wasn't sure why \"bernie\" tends more towards \"good\"\n",
    "but then I realized the bots may have wanted to invalidate Clinton's\n",
    "election as the Democratic Party Representative. What I didn't expect,\n",
    "however, was that \"her\" is closer to \"good\" than \"bad\". I expected the\n",
    "only woman the Russian bots would tweet about would be Clinton but\n",
    "perhaps there were others who were spoken of positively within the\n",
    "3 million tweets.\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ------------------------ 4) third experiment ------------------------ #\n",
    "\n",
    "'''\n",
    "preparing data to be plotted pt 2\n",
    "'''\n",
    "\n",
    "# the top 20 most similar words to \"trump\" and \"clinton\" in the Word2Vec vector space\n",
    "terms = model.wv.most_similar(positive=['president'], topn=20)\n",
    "\n",
    "# isolating only the words (and dropping their scores)\n",
    "terms = [word for word, score in terms]\n",
    "\n",
    "# lists to hold the scores of the words from 'terms' most similar to \"good\" and \"bad\"\n",
    "# in the Word2Vec vector space\n",
    "democrat_scores = []\n",
    "republican_scores = []\n",
    "\n",
    "# iterating through the words in 'terms' and appending each one's similarity to \"good\"\n",
    "for word in terms:\n",
    "    score = model.wv.similarity(word, 'democrat')\n",
    "    democrat_scores.append(score)\n",
    "    \n",
    "    # iterating through the words in 'terms' and appending each one's similarity to \"bad\"\n",
    "for word in terms:\n",
    "    score = model.wv.similarity(word, 'republican')\n",
    "    republican_scores.append(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_words(democrat_scores, republican_scores, 'democrat', 'republican', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nReflection:\\nHere the main thing I noticed is that the words associated with higher positions\\nin government (\"presidential\", \"prez\", \"vp\", etc.) are closer to \"republican\"\\nwhereas the words associated with lower positions (\"candidate\", \"mayor\", \"admin\")\\nare closer to \"democrat\". This makes sense as the Russian bots were likely\\ntrying to elevate Trump (and the Republican party) as the ideal presidental\\ncandidate and lower Clinton (and the Democrat party) in the eyes of the people.\\n'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "Reflection:\n",
    "Here the main thing I noticed is that the words associated with higher positions\n",
    "in government (\"presidential\", \"presidents\", prez\", \"vp\", \"pouts\" etc.) are closer to \"republican\"\n",
    "whereas the words associated with lower positions (\"mayor\", \"administration\", \"politician\") with\n",
    "the exception of \"leader\" are closer to \"democrat\". This makes sense as the Russian bots were likely\n",
    "trying to elevate Trump (and the Republican party) as the ideal presidental candidate and lower the\n",
    "reputation of Clinton (and the Democratic party) in the eyes of the people.\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/faithrta/opt/anaconda3/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3444: DtypeWarning: Columns (0,15,20) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/faithrta/opt/anaconda3/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3444: DtypeWarning: Columns (20) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/faithrta/opt/anaconda3/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3444: DtypeWarning: Columns (10,20) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    }
   ],
   "source": [
    "# ------------------------ 5) fourth experiment ------------------------ #\n",
    "\n",
    "'''\n",
    "reading in the tweets from all 13 csv files and appending their contents to a list\n",
    "'''\n",
    "\n",
    "# the filepath to the 13 csv files\n",
    "path = '/Users/faithrta/engl_490_python/russian-troll-tweets-master/'\n",
    "\n",
    "# a list to store all the tweets\n",
    "tweets_usa = []\n",
    "\n",
    "# iterating through the numbers 1 to 13\n",
    "for i in range(1, 14):\n",
    "    \n",
    "    # creating a temporary df for the current csv\n",
    "    cur_csv = pd.read_csv(path + \"IRAhandle_tweets_\" + str(i) + \".csv\")\n",
    "    \n",
    "    # deleting all row entries that do not have any text under the 'content' column\n",
    "    cur_csv = cur_csv[cur_csv['content'].notna()]\n",
    "    \n",
    "    cur_csv = cur_csv[cur_csv['region'] == 'United States']\n",
    "    \n",
    "    # adding all the tweets from this csv to the 'tweets' list\n",
    "    tweets_usa.extend(cur_csv['content'].tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "tokenizing each sentence for every tweet, then saving a list of lists where each sublist\n",
    "contains the words of one sentence\n",
    "'''\n",
    "\n",
    "# a list in which each eleement is a sentence\n",
    "sentences_usa = [sentence for tweet in tweets_usa for sentence in nltk.sent_tokenize(tweet)]\n",
    "\n",
    "# a list of lists in which each list contains the words of one sentence\n",
    "words_by_sentence_usa = [fast_tokenize(sentence.lower()) for sentence in sentences_usa]\n",
    "\n",
    "# removing all the links from the words in words_by_sentence\n",
    "words_by_sentence_usa = remove_links(words_by_sentence_usa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "running Word2Vec on the list of lists (in which each sublist contains the words of one sentence)\n",
    "'''\n",
    "\n",
    "model_usa = gensim.models.Word2Vec(words_by_sentence_usa, window=5, min_count=5, sg=0, alpha=0.025, batch_words=10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('global', 0.5981919169425964),\n",
       " ('scifantasy', 0.5613938570022583),\n",
       " ('climatechange', 0.5532890558242798),\n",
       " ('aggressivenegotiation6', 0.5406283140182495),\n",
       " ('policy', 0.5334553718566895)]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# finding the 10 closest words to \"climate\" in the vector space created by the 3 million tweets\n",
    "model.wv.most_similar(positive=['climate'], topn=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('economic', 0.579101026058197),\n",
       " ('wiaa', 0.55320805311203),\n",
       " ('climatechange', 0.5423266887664795),\n",
       " ('aggressivenegotiation6', 0.5277845859527588),\n",
       " ('global', 0.5226873159408569)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# finding the 10 closest words to \"climate\" in the vector space created by only the tweets\n",
    "# originating from the United states\n",
    "model_usa.wv.most_similar(positive=['climate'], topn=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nReflection:\\nThe motivation of this experiment was to see if any of the word proximities would\\nchange from the vector space created by all 3 million tweets compared to the one\\ncreated by only tweets from the United States. Interestingly, the closest word\\nto \"climate\" in the former is \"global\", which carries connotations of globalization\\nand interconnectedness, whereas the closest word from the American bot tweets is\\n\"economic\", which gestures towards the financial significance of climate change.\\nI\\'m not completely sure what this means but it\\'s fascinating that bot tweets\\noriginating from the capitalistic country whose election they\\'re targetting are \\nmore focused on the economy than those from elsewhere.\\n'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "Reflection:\n",
    "The motivation of this experiment was to see if any of the word proximities would\n",
    "change from the vector space created by all 3 million tweets compared to the one\n",
    "created by only tweets from the United States. Interestingly, the closest word\n",
    "to \"climate\" in the former is \"global\", which carries connotations of globalization\n",
    "and interconnectedness, whereas the closest word from the American bot tweets is\n",
    "\"economic\", which gestures towards the financial significance of climate change.\n",
    "I'm not completely sure what this means but it's fascinating that bot tweets\n",
    "originating from the capitalistic country whose election they're targetting are \n",
    "more focused on the economy than those from elsewhere.\n",
    "'''"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
